"""https://stackoverflow.com/questions/89228/how-do-i-execute-a-program-or-call-a-system-commandSourcessubprocess: https://docs.python.org/3.5/library/subprocess.htmlshlex: https://docs.python.org/3/library/shlex.htmlos: https://docs.python.org/3.5/library/os.htmlsh: https://amoffat.github.io/sh/plumbum: https://plumbum.readthedocs.io/en/latest/pexpect: https://pexpect.readthedocs.io/en/stable/fabric: http://www.fabfile.org/envoy: https://github.com/kennethreitz/envoycommands: https://docs.python.org/2/library/commands.htmlThese are all the librariesHopefully this will help you make a decision on which library to use :)"""#subprocess#Subprocess allows you to call external commands and connect them to their input/output/error pipes (stdin, stdout, and stderr). Subprocess is the default choice for running commands, but sometimes other modules are better.subprocess.run(["ls", "-l"]) # Run commandsubprocess.run(["ls", "-l"], stdout=subprocess.PIPE) # This will run the command and return any outputsubprocess.run(shlex.split("ls -l")) # You can also use the shlex library to split the command#os#os is used for "operating system dependent functionality". It can also be used to call external commands with os.system and os.popen (Note: There is also a subprocess.popen). os will always run the shell and is a simple alternative for people who don't need to, or don't know how to use subprocess.run.os.system("ls -l") # Run commandos.popen("ls -l").read() # This will run the command and return any output#sh#sh is a subprocess interface which lets you call programs as if they were functions. This is useful if you want to run a command multiple times.sh.ls("-l") # Run command normallyls_cmd = sh.Command("ls") # Save command as a variablels_cmd() # Run command as if it were a function#plumbum#plumbum is a library for "script-like" Python programs. You can call programs like functions as in sh. Plumbum is useful if you want to run a pipeline without the shell.ls_cmd = plumbum.local("ls -l") # Get commandls_cmd() # Run command#pexpect#pexpect lets you spawn child applications, control them and find patterns in their output. This is a better alternative to subprocess for commands that expect a tty on Unix.pexpect.run("ls -l") # Run command as normalchild = pexpect.spawn('scp foo user@example.com:.') # Spawns child applicationchild.expect('Password:') # When this is the outputchild.sendline('mypassword')#fabric#fabric is a Python 2.5 and 2.7 library. It allows you to execute local and remote shell commands. Fabric is simple alternative for running commands in a secure shell (SSH)fabric.operations.local('ls -l') # Run command as normalfabric.operations.local('ls -l', capture = True) # Run command and receive output#envoy#envoy is known as "subprocess for humans". It is used as a convenience wrapper around the subprocess module.r = envoy.run("ls -l") # Run commandr.std_out # Get output#commands#commands contains wrapper functions for os.popen, but it has been removed from Python 3 since subprocess is a better alternative.